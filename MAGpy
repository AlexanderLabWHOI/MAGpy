shell.executable("/bin/bash")
#shell.prefix("source $HOME/.bashrc; ")

import os

configfile: "config.json"

IDS, = glob_wildcards("mags/{id}.fa")

rule all:
	 input: "sourmash_report.csv", "diamond_bin_report_plus.tsv", expand("pfam/{sample}.pfam", sample=IDS), expand("sourmash/{sample}.sm", sample=IDS), expand("diamond_report/bin.{sample}.tsv", sample=IDS), "checkm_plus.txt", expand("busco/euk/{sample}/full_table_{sample}.tsv", sample=IDS), "busco_euk_report.tsv", "quast_report.txt", expand('quast/{sample}/transposed_report.tsv', sample=IDS),  'gtdbtk-output/gtdbtk.bac120.summary.tsv', #  expand("busco/bac/{sample}/full_table_{sample}_bac.tsv", sample=IDS), "busco_bac_report.tsv", "tree/MAGpy/MAGpy.tree.nwk", 

localrules: mv_busco_euk 

rule checkm:
	input: "mags"
	output: "checkm.txt"
	#threads: 16
	conda: "envs/checkm.yaml"
	params: 
		cdr=config["checkm_dataroot"]
	shell: 
		'''
		checkm_db={params.cdr}
		echo ${{checkm_db}} | checkm data setRoot ${{checkm_db}}
		checkm lineage_wf -f checkm.txt --reduced_tree -t {threads} -x fa {input} ./checkm
		'''

rule checkm_plus:
	input: "checkm.txt"
	output: "checkm_plus.txt"
	threads: 1
	conda: "envs/ete3.yaml"
	shell: "scripts/add_tax.py {input} > {output}"

rule prodigal:
	input: 'mags/{id}.fa'
	output: 
		faa='proteins/{id}.faa',
		gff='proteins/{id}_prodigal.gff'
	conda: "envs/prodigal.yaml"
	shell: 'prodigal -p meta -a {output.faa} -q -i {input} -f gff -o {output.gff}'

rule diamond:
        input: 'proteins/{id}.faa'
        output: 'diamond/{id}.diamond.tsv'
        threads: 16
        params:
                db=config["uniprot_sprot"],
                of="6 qseqid sseqid stitle pident qlen slen length mismatch gapopen qstart qend sstart send evalue bitscore"
        conda: "envs/diamond.yaml"
	shell: "diamond blastp --threads {threads} --max-target-seqs 10 --db {params.db} --query {input} --outfmt {params.of} --out {output}"

rule diamond_report:
	input: 
		tsv='diamond/{id}.diamond.tsv',
		faa='proteins/{id}.faa'
	output: 'diamond_report/bin.{id}.tsv', 'diamond_report/con.{id}.tsv'
	params:
		outdir="diamond_report"
	conda: "envs/bioperl.yaml"
	shell: "scripts/diamond_report.pl {input.tsv} {input.faa} {params.outdir}"

rule diamond_bin_summary:
        input: expand("diamond_report/bin.{sample}.tsv", sample=IDS)
        output: "diamond_bin_report.tsv"
        shell:
            """
            echo -e 'name\tnprots\tnhits\tnfull\tgenus\tngenus\tspecies\tnspecies\tavgpid' >> {output}
            find diamond_report/ -name "bin*.tsv" | xargs -I {{}} cat {{}} >> {output}  
            """

rule diamond_bin_summary_plus:
        input: "diamond_bin_report.tsv"
        output: "diamond_bin_report_plus.tsv"
	conda: "envs/ete3.yaml"
        shell: "scripts/add_tax_diamond.py {input} > {output}"


rule sourmash_sig:
        input: 'mags/{id}.fa'
        output: 'sourmash/{id}.sig'
	conda: "envs/sourmash.yaml"
        shell: "sourmash compute --scaled 1000 -k 31 -o {output} {input}"

rule sourmash_gather:
        input: 'sourmash/{id}.sig'
        output:
                csv='sourmash/{id}.csv',
                out='sourmash/{id}.sm'
	params:
		gb=config["sourmash_gbk"]
	conda: "envs/sourmash.yaml"
	shell: "sourmash gather -k 31 {input} {params.gb} -o {output.csv} > {output.out}"

rule sourmash_report:
	input: expand("sourmash/{sample}.csv", sample=IDS)
	output: 'sourmash_report.csv'
	shell: "echo 'intersect_bp,f_orig_query,f_match,f_unique_to_query,f_unique_weighted,average_abund,median_abund,std_abund,name,filename,md5' >> {output} && scripts/sourmash_report.pl {input} >> {output}"

rule pfam_scan:
	input: 'proteins/{id}.faa'
	output: 'pfam/{id}.pfam'
	threads: 8
	params:
		pfam=config["pfam_dir"]
	conda: "envs/pfam_scan.yaml"
	shell: "pfam_scan.pl -outfile {output} -as -cpu {threads} -fasta {input} -dir {params.pfam}"

rule phylophlan_link:
	input: expand("proteins/{sample}.faa", sample=IDS)
	output: "tree/MAGpy/MAGpy.tree.nwk"
	threads: 16
	conda: "envs/basic2.yaml"
	params:
		pdir=config["phylophlan_dir"],
		unn=os.getpid()
	shell: 
		'''
		CWD=`pwd`
		mkdir {params.pdir}/input/{params.unn}
		cp proteins/*.faa {params.pdir}/input/{params.unn}
		cd {params.pdir}
		./phylophlan.py -u {params.unn} --nproc {threads}
		mkdir -p $CWD/tree/MAGpy
		mv ./output/{params.unn}/*.nwk $CWD/tree/MAGpy/MAGpy.tree.nwk
		mv ./output/{params.unn}/*.xml $CWD/tree/MAGpy/MAGpy.tree.xml
		./phylophlan.py -i -t {params.unn} --nproc {threads}
		mv ./output/{params.unn}/*.nwk $CWD/tree/MAGpy/MAGpy.treeoflife.nwk
		mv ./output/{params.unn}/*.txt $CWD/tree/MAGpy/
		cd $CWD
		rm -rf {params.pdir}/input/{params.unn}
		rm -rf {params.pdir}/data/{params.unn}
		rm -rf {params.pdir}/output/{params.unn}/
		'''

rule busco_euk:
    input: "mags/{id}.fa"
    output: "run_{id}/full_table_{id}.tsv"
    params: 
        outname = "{id}",
        db = config["busco_euk"],
    conda: "envs/busco.yaml"
    shell: 
        '''
        run_BUSCO.py -i {input} -o {params.outname} -l {params.db} -m geno -f 
        '''

rule mv_busco_euk:
    input:  "run_{id}/full_table_{id}.tsv"
    output: "busco/euk/{id}/full_table_{id}.tsv" 
    params: 
        outname = "{id}", 
        outdir = "busco/euk/{id}"
    shell: 
        """ 
         cp -a run_{params.outname}/. {params.outdir} 
         rm -rf run_{params.outname}   
        """ 

rule busco_summary_euk:
    input: expand("busco/euk/{sample}/full_table_{sample}.tsv", sample=IDS)
    output: "busco_euk_report.tsv"
    params: 
        dire = "busco/euk"
    shell: "python scripts/busco-report.py -d {params.dire} -o {output}"

rule quast:
    input: 'mags/{id}.fa'
    output: 'quast/{id}/transposed_report.tsv'
    params:
        dire = "quast/{id}"
    conda: "envs/busco.yaml"
    shell:
        """
        quast.py {input} -o {params.dire}
        """
rule quast_summary: 
    input: expand("quast/{sample}/transposed_report.tsv", sample=IDS)
    output: "quast_report.txt"
    shell: 
        """
        echo -e 'Assembly\t# contigs (>= 0 bp)\t# contigs (>= 1000 bp)\t# contigs (>= 5000 bp)\t# contigs (>= 10000 bp)\t# contigs (>= 25000 bp)\t# contigs (>= 50000 bp)\tTotal length (>= 0 bp)\tTotal length (>= 1000 bp)\tTotal length (>= 5000 bp)\tTotal length (>= 10000 bp)\tTotal length (>= 25000 bp)\tTotal length (>= 50000 bp)\t# contigs\tLargest contig\tTotal length\tGC (%)\tN50\tN75\tL50\tL75\t# Ns per 100 kbp\t' >> {output} 
        find quast/* -name "transposed_report.tsv" | xargs -I {{}} tail -n 1 {{}} >> {output}
        """ 

rule gtdb:
    input: directory("mags/")
    output: 'gtdbtk-output/gtdbtk.bac120.summary.tsv'
    params:
        outdir="gtdbtk-output",
        cpus=36, 
        gtdb_path=config["gtdbtk_path"], 
        extension=config["gtdbtk_extension"]
    conda:
        "envs/gtdb.yaml"
    shell:
        """
        export GTDBTK_DATA_PATH={params.gtdb_path}
        gtdbtk classify_wf --cpus {params.cpus} --genome_dir {input} --out_dir {params.outdir} --extension {params.extension}
        """



#rule busco_bac:
#    input: "mags/{id}.fa"
#    output: "run_{id}_bac/{id}_bac.tsv"
#    params: 
#        outname = "{id}_bac",
#        db = config["busco_bac"], 
#    conda: "envs/busco.yaml"
#    shell: 
#        '''
#        run_BUSCO.py -i {input} -o {params.outname} -l {params.db} -m geno -f  
#        '''

#rule mv_busco_bac:
#    input: "run_{id}_bac/full_table_{id}_bac.tsv"
#    output: "busco/bac/{id}/full_table_{id}_bac.tsv"
#    params:
#        outname =  "{id}_bac",
#        outdir = "busco/bac/{id}"
#    shell: 
#        """
#         cp -a run_{params.outname}/. {params.outdir} 
#         rm -rf run_{params.outname}   
#        """

#rule busco_summary_bac:
#        input: expand("busco/bac/{sample}/full_table_{sample}_bac.tsv", sample=IDS)
#        output: "busco_bac_report.tsv"
#        params: 
#            dire = "busco/bac"
#        shell: "python scripts/busco-report.py -d {params.dire} -o {output}"



##########################################
#
#
#   clean up - careful how you use
#
#
##########################################

rule clean:
	shell:
		'''
		rm -rf proteins
		rm -rf diamond
		rm -rf diamond_report
		rm -rf sourmash
		rm -rf checkm
		rm -f checkm.txt
		rm -f checkm_plus.txt
		rm -f diamond_bin_report.tsv
		rm -f sourmash_report.csv
		rm -f diamond_bin_report_plus.tsv
		rm -rf pfam
		rm -rf tree
		rm -rf test/outputs
		rm -rf test_results.txt
	    rm -rf gtdbtk-output/
        rm -rf busco_euk_report.tsv
        rm -rf quast/
        rm -rf quast_report.txt
        rm -rf busco/
    	'''

##########################################
#
#
#   Tests
#
#
##########################################

rule test:
	input: "test/outputs/checkm.txt", "test/outputs/checkm_plus.txt", "test/outputs/diamond.txt", "test/outputs/diamond_report.txt", "test/outputs/diamond_bin_summary.txt", "test/outputs/prodigal.txt", "test/outputs/sourmash.txt", "test/outputs/phylophlan.txt"
	output: "test_results.txt"
	shell:
		'''
		cat test/outputs/* > {output}
		cat {output}
		'''

rule test_checkm:
	output: "test/outputs/checkm.txt"
	conda: "envs/checkm.yaml"
	shell:
		'''
		test/scripts/test_checkm.py {output}	
		'''	

rule test_checkm_plus:
	output: "test/outputs/checkm_plus.txt"
	conda: "envs/ete3.yaml"
	shell:
		'''
		test/scripts/test_checkm_plus.py {output}
		'''

rule test_diamond:
	output: "test/outputs/diamond.txt"
	conda: "envs/diamond.yaml"
	shell:
		'''
                test/scripts/test_diamond.py {output}
                '''

rule test_diamond_report:
	output: "test/outputs/diamond_report.txt"
	conda: "envs/bioperl.yaml"
	shell:
		'''
		test/scripts/test_diamond_report.py {output}
		'''

rule test_diamond_bin_summary_plus:
	output: "test/outputs/diamond_bin_summary.txt"
	conda: "envs/ete3.yaml"
	shell:
		'''
		test/scripts/test_diamond_bin_summary_plus.py {output}
		'''

rule test_prodigal:
	output: "test/outputs/prodigal.txt"
	conda: "envs/prodigal.yaml"
	shell:
		'''
		test/scripts/test_prodigal.py {output}
		'''


rule test_sourmash:
	output: "test/outputs/sourmash.txt"
	conda: "envs/sourmash.yaml"
	shell:
		'''
		test/scripts/test_sourmash.py {output}
		'''	

rule test_phylophlan:
	output: "test/outputs/phylophlan.txt"
	conda: "envs/basic2.yaml"
	params:
		pdir=config["phylophlan_dir"]
	shell:
		'''
		test/scripts/test_phylophlan.py {params.pdir} {output}
		'''

       
